// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/meooow25/cfspy/bot (interfaces: Messager)

// Package mock_bot is a generated GoMock package.
package mock_bot

import (
	context "context"
	reflect "reflect"

	disgord "github.com/andersfylling/disgord"
	snowflake "github.com/andersfylling/snowflake/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockMessager is a mock of Messager interface.
type MockMessager struct {
	ctrl     *gomock.Controller
	recorder *MockMessagerMockRecorder
}

// MockMessagerMockRecorder is the mock recorder for MockMessager.
type MockMessagerMockRecorder struct {
	mock *MockMessager
}

// NewMockMessager creates a new mock instance.
func NewMockMessager(ctrl *gomock.Controller) *MockMessager {
	mock := &MockMessager{ctrl: ctrl}
	mock.recorder = &MockMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessager) EXPECT() *MockMessagerMockRecorder {
	return m.recorder
}

// AddReactListener mocks base method.
func (m *MockMessager) AddReactListener(arg0 func(interface{}) interface{}, arg1 disgord.HandlerCtrl, arg2 func(disgord.Session, *disgord.MessageReactionAdd)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddReactListener", arg0, arg1, arg2)
}

// AddReactListener indicates an expected call of AddReactListener.
func (mr *MockMessagerMockRecorder) AddReactListener(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReactListener", reflect.TypeOf((*MockMessager)(nil).AddReactListener), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockMessager) Delete(arg0 context.Context, arg1 *disgord.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessagerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessager)(nil).Delete), arg0, arg1)
}

// Edit mocks base method.
func (m *MockMessager) Edit(arg0 context.Context, arg1 *disgord.Message, arg2 string, arg3 *disgord.Embed) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockMessagerMockRecorder) Edit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockMessager)(nil).Edit), arg0, arg1, arg2, arg3)
}

// React mocks base method.
func (m *MockMessager) React(arg0 context.Context, arg1 *disgord.Message, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "React", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// React indicates an expected call of React.
func (mr *MockMessagerMockRecorder) React(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "React", reflect.TypeOf((*MockMessager)(nil).React), arg0, arg1, arg2)
}

// Send mocks base method.
func (m *MockMessager) Send(arg0 context.Context, arg1 snowflake.Snowflake, arg2 *disgord.CreateMessageParams) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessagerMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessager)(nil).Send), arg0, arg1, arg2)
}

// Unreact mocks base method.
func (m *MockMessager) Unreact(arg0 context.Context, arg1 *disgord.Message, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unreact", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unreact indicates an expected call of Unreact.
func (mr *MockMessagerMockRecorder) Unreact(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unreact", reflect.TypeOf((*MockMessager)(nil).Unreact), arg0, arg1, arg2)
}

// UnreactUser mocks base method.
func (m *MockMessager) UnreactUser(arg0 context.Context, arg1 *disgord.Message, arg2 string, arg3 snowflake.Snowflake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnreactUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreactUser indicates an expected call of UnreactUser.
func (mr *MockMessagerMockRecorder) UnreactUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreactUser", reflect.TypeOf((*MockMessager)(nil).UnreactUser), arg0, arg1, arg2, arg3)
}
